1.eslint
    首先我们安装eslint yarn add eslint eslint-loader -D

    之后我们需要配置loader
    rules: [
        {
            test: /\.js$/,
            use: {
                loader: 'eslint-loader'
            }
        }
    ]

2.引入全局变量
    import $ from 'jquery';
    yarn add jquery -D

    注意：loader有三种 分别是全局的loader expose-loader 内敛loader 
    pre 前面执行的 normal 普通的loader 内联loader post 后置

    那么现在我们想暴露出来一个$ 符号来 那么我们就可以使用全局的loader
    import $ from 'expose-loader?$!jquery';

3.devtool 源码映射
    3.1 devtool 设置为source-map 增加映射文件 出错了会 标识 当前报错的列和行  大 全

    3.2 设置为 eval-source-map  不会产生单独的文件 可以帮助我们调试源码

    3.3 设置为 cheap-module-source-map 不会产生列只会产生一个映射文件

    3.4 设置为 cheap-module-eval-source-map 不会产生文件 集成在打包后的文件中 不会产生列

4.watch 
    watch: true
    代码有更新的时候自动开始重新打包
    // 监控的选项
    watchOptions:{
        poll: 1000, // 每秒问我一千次是否要更行
        ignored: /node_modules/
        aggreatement: 500,//防抖 我一直输入代码 不能我每次输入代码就问我是否要打包 防抖的作用
    }

5.webpack小插件
    5.1 cleanWebpackPlugin 清除上一次打包出来的文件

    5.2 copyWebpackPlugin 复制文件到另外的文件

    5.3版权输出
        bannerPlugin
        使用需要引入webpack 之后new webpack.bannerPlugin('2020-10-01')

6.webpack 输出的css html 我们可以指定输出的文件夹
    并且我们可以给我们的图片或者我们的js前面增加我们的域名

7.webpack跨域问题
    我们可以使用express来 启动一个服务
    var express = require('express');
    我们用3000端口去请求8080由于同源策略是有跨域问题的

    所以我们需要配置代理
    就是在
    devServer:{
        proxy: {
            '/api': 'http://localhost:3000' // 如果你方位的是/api那么就代理到3000端口 就同端口的
        }
    }
    这样还是有问题 我们不能把api传递给后端 所以我们应该将 /api去掉
    devServer:{
        proxy: {
            '/api': {
                target: 'http://localhost:3000',
                pathRewrite: {
                    '/api': ''// 这样我们就可以把这个/api给替换为空了
                }
            }
        }
    }

    如果我们前端需要自己模拟数据的时候可以在before这个钩子上进行
    eg: devServer:{
        bdfore(app) {
            app.get('./', (req, res) => { // 这里就可以进行数据返回的模拟了
                res.json({name: '11'})
            })
        }
    }

8. resolve 解析第三方包
    我们在使用的时候可以指定我们的解析文件 
    eg: resolve: {
        modules: [path.resolve('node_modules')]
    }
    第二个参数是alias 是可以配置别名的
    eg: resolve: {
        alias: {
            '$': './src' // 那么我们以后写./src的时候就可以直接写$来代替了
            mainFields: ['style'] // 可以指定入口 先找style
        }
    }

    自动补全配置
    extensions: [// 默认是先找js 然后是 css 然后是 json 最后是vue
        '.js',
        '.css',
        '.json',
        '.vue'
    ]

9.定义环境变量
    webpack有一个自定义的插件叫 webpack.definePlugin();

10.区分环境
    分别创建不同环境的配置文件 然后使用merge进行合并

11.webpack优化
    配置noPress是不需要解析的文件

    exclude 也可以

    include的意思也是一样的 exclude是排除一个  include是只检测某一个

    我们可以忽略某个插件
    new webpack.IgnorePlugin({
        /\./locale//, /moment/
    })
    意思就是我们在引入某个插件的时候如果他去找loale下面的东西的时候我们就忽略掉他

12.动态