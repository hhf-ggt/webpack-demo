手动写一个webpack
 创建一个bin目录 然后下面建我们的脚本文件
 content
    #!/usr/bin/env node  // 告诉别人我这里需要node环境

    console.log('start')

    // npm link  会将我们的当前的包链接到我们的package.json文件中

    // 1.需要找到当前执行名的路劲， 拿到webpack.config.json文件中

    let path =require('path');
    // config 配置文件
    let config = require(path.resolve('webpack.config.js'));

    // 我们新建lib文件
    let Compiler = require('../lib/Compiler')
    let compiler = new Compiler(config);

    // complier文件内容
    let fs = require('fs');
    let path = require('path');
    let babylon = require('babylon');
    let traverse = require(''@babel/traverse).default;
    let t = require('@babel/types');
    let generator = require('@babel/generator');
    class Compiler {
        constructor(config) {
            this.config = config;
            // 需要保存入口文件的路劲
            this.entryId;
             // 需要保存所有模块的依赖
            this.modules = {};
            this.entry = config.entry;// 入口路径
            // 文件的绝对路径
            this.root = process.cwd();
        }
        // 定义一个获取资源的方法
        getSource(modulePath) {
            let content = fs.readFilesSync(modulePath, 'utf8');
            return content;
        }
        //解析
        parse(source, parentPath) {// ast解析树
            // babylon 主要是将源码转换为 ast解析树
            // @babel/traverse
            // @babel/types
            //@babel/generator
        }
        // 构建模块 
        buildModule(modulePath, isEntry) {
            // 拿到模块内容
            let source = this.getSource(modulePath);
            // 模块id modulePath = modulePath - this.root;
            let moduleName = './' + path.relative(this.root, modulePath);
            console.log(source, moduleName);

            if(isEntry) {
                this.entryId = moduleName; // 保存入口的文件
            }
            // 解析源码 将source源码进行改造 返回一个依赖列表
            let { sourceCode, dependencies } = this.parse(source, path.dirname(moduleName));// ./src

            // 拿到我们解析的东西后将模块名和路径对应起来就好了
            this.modules[moduleName] = sourceCode;
        }
        emitFile() {// 发射文件

        }
        run() {
           // 执行 并且创建 模块依赖关系
           this.buildModule(path.resolve(this.root, this.entry), true);
           // 发射一个文件 打包后的文件
           this.emitFile();
        }
    }
    module.explorts = Compiler;
